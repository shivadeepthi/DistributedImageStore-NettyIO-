
option optimize_for = SPEED;
option java_package = "eye";

// general status. The NO[word] values are 'failure for cause' and 
// FAILURE is w/o cause.
enum PokeStatus {
   UKNOWN = 1;
   SUCCESS = 2;
   NOFOUND = 100;
   NOINCOMPLETE = 101;
   NOAUTH = 102;
   NOCONNECTION = 103;
   NOREACHABLE = 104;
   NORESOURCE = 105;
   FAILURE = 199;
}

// data - a hierarchical container to send/receive name-value pairs
message NameValueSet {
    // a node should not have a value though this is not enforced
    required NodeType node_type = 1;

    optional string name = 2;
    optional string value = 3;

    // nested NVPs
    repeated NameValueSet node = 4;
    
    enum NodeType {
    	NODE = 1;
    	VALUE = 2;
    }
}

// data - a logical separation of data/processing capabilities (same as a tentant)
message NameSpace {
   // internally created or supplied by caller when performing an action on a NS
   required int64 ns_id = 2 [default = -1]; 

   optional string name = 3;
   optional string desc = 4;
   optional int64 created = 5;
   optional int64 last_modified = 6;
   optional string owner = 7;

   // additional properties of the space
   optional NameValueSet properties = 8;
}

// data - a job description
message JobDesc {
   required string name_space = 1;
   required int64 owner_id = 2;
   required string job_id = 3;
   required JobCode status = 4;
   optional NameValueSet options = 5;

   enum JobCode {
       JOBUNKNOWN = 1;
       JOBRECEIVED = 2;
       JOBQUEUED = 3;
       JOBRUNNING = 4;
       JOBKILLED = 100;
       JOBFAILED = 101;
   }
}

// request/response - check to see if a node is accepting requests
message Ping {
   required int32 number = 1;
   required string tag = 2;
}

// request - perform an operation to the namespace
message NameSpaceOperation {
   required SpaceAction action = 1;
   optional int64 ns_id = 2 [default = -1]; 
   optional NameSpace data = 3;

   // additional options for operation
   optional NameValueSet options = 4;

   enum SpaceAction {
      ADDSPACE = 1;
      UPDATESPACE = 2;
      REMOVESPACE = 3;
      LISTSPACES = 4;
   }
}

// response - reply from a space operation
message NameSpaceStatus {
   required PokeStatus status = 1;

   // data pertaining to the space operation
   repeated NameSpace data = 2;
}

// external request - a job operation
message JobOperation {
   required JobAction action = 1;
  
   // ID for actions on known jobs
   optional string job_id = 2;

   // new job to add
   optional JobDesc data = 3;

   enum JobAction {
      ADDJOB = 1;
      STOPJOB = 2;
      REMOVEJOB = 3;
      LISTJOBS = 4;
   }
}

// request - a node submits a job to be ran on the cluster
message JobProposal {
   required string name_space = 1;
   required int64 owner_id = 2;
   required string job_id = 3;

   // weight is a scalar value representing the expected load for 
   // performing this job (e.g., 1 = light, 10 = intensive)
   required int32 weight  = 4;

   // properties of the job
   optional NameValueSet options = 5;
}

// request - a node's bid for running a job (a response in the form of a request)
message JobBid {
   required string name_space = 1;
   required int64 owner_id = 2;
   required string job_id = 3;

   // a weighted bid -> this helps to remove ties in systems with a
   // even number of voters 
   required int32 bid = 4;
}


// response - the status of a job
message JobStatus {
    required string job_id = 1;
    required PokeStatus status = 2;
    required JobDesc.JobCode job_state = 3;

    // data associated with a job request
    repeated JobDesc data = 4;
}

message RoutingPath {
    required int32 node_id = 1;
    required int64 time = 2;
}

message Header {  
    required Routing routing_id = 1;
    required int32 originator = 2;
    optional string tag = 3;
    optional int64 time = 4;
    
    // while we can use extensions, it is not a clean inheritance 
    // implementation and since requests and responses differ only 
    // by these two fields, a new message is not created.

    optional PokeStatus reply_code = 5;
    optional string reply_msg = 6;
    
    // the path a message takes - to handle cycles in the network
    repeated RoutingPath path = 7;

    // if the message is for a specific node, this will be set
    optional int32 toNode = 8;

    // catch all for options
    repeated NameValueSet options = 9;

    enum Routing {
        PING = 2;
        NAMESPACES = 3;
        JOBS = 4;
        REPORTS = 10;
        MANAGE = 100;
        }
}

// these are commands from external (and possible internal) clients
// TODO: this needs to be moved to its own .proto
message Payload {
    // requests & replies
    optional Ping ping = 1;

    // requests only
    optional NameSpaceOperation space_op = 2;
    optional JobOperation job_op = 3;

    // replies only
    optional JobStatus job_status = 13;
    optional NameSpaceStatus space_status = 12;
   
    // TBD
    // reports
}

message Request {
    required Header header = 1;
    required Payload body = 2;
}

message Heartbeat {
    required int64 time_ref = 2;
}

message Network {
    required int32 from_node_id = 1;
    required int32 to_node_id = 2;
    required NetworkAction action = 3;

    enum NetworkAction {
       NODEJOIN = 1;
       NODELEAVE = 2;
       NODEDEAD = 3;
       CREATEMAP = 55;
       ANNOUNCE = 56;
       SHUTDOWN = 999;
   }
}

message LeaderElection {
   required string elect_id = 2; // election ID (not candidate)
   required int32 candidate_id = 3;
   optional string desc = 4;
   required ElectAction action = 5;
   
   // this is seconds since
   optional int64 expires = 6 [default = -1];
   
   // the number of times this message should be propagated. 
   // For Flooding, this is the diameter of the graph to ensure 
   // a message can reach all nodes. If the diameter is unknown,
   // limiting the hops will create non-deterministic results.
   optional int32 hops = 7 [default = -1];
   
   enum ElectAction {
      DECLAREELECTION = 1;
      NOMINATE = 2;
      ABSTAIN = 3;
      DECLAREWINNER = 4;
      DECLAREVOID = 5;
      WHOISTHELEADER = 6;
      THELEADERIS = 7;
   }
}

// voting is a general feature used by the framework and external resources.
message VotingBallot {
   required string ballot_id = 1;
   required string desc = 2;
   required BallotType ballot_format = 3;
   
   // supports time constrained voting
   optional int64 expires_sec = 6;
   
   // supports voting where a winning margin (percentage, 52, 60 %) is needed to declare a winner
   optional int32 margin_to_win = 7;
   
   // interesting/novel idea is to support localized elections for near-cooperation 
   // events. This factor limits the hops that a vote occurs within a network 
   // relative to the initiating node. Default (-1) is the whole network.
   optional int32 max_hops = 8 [default = -1];
   
   enum BallotType {
      SIMPLEMAJORITY = 1;
      TIMECONSTRAINEDMAJORITY = 2;
      RANKED = 3;
      INSTANTRUNOFF = 4;
   }
}

// voting - casting a vote
message VotingCast {
   required string voter = 1;
   required string ballot_id = 2;
   
   // voting may not require a candidate other than a 'yup' and silence 
   // for 'nope'. So, these fields are optional. Secondly, voting algo
   // that requires ranking or cumulative approach will have to submit
   // multiple messages
   
   // the voting item (candidate)
   optional int32 candidate = 10;
 
   // positional preference or weight
   optional int32 rank = 11;
}

// voting status update (declare winner, cancel, ...)
message VotingStatus {
   required string ballot_id = 1;
   required VoteStatus status = 2;
   optional int32 winner = 3;
   
   enum VoteStatus {
      BALLOTABANDONED = 1;
      BALLOTWINNER = 2;
   }
}

// lightweight header for internal messages
message MgmtHeader {  
    required int32 originator = 2;
    optional int64 time = 4;
    
    // the path a message takes - to handle cycles in the network
    repeated RoutingPath path = 7;

    // if the message is for a specific node, this will be set
    optional int32 toNode = 8;
}

// internal communication payload
message Management {
   required MgmtHeader header = 1;

   // a node joined or left the network
   optional Network graph = 2;

   // status updates between adjacent nodes
   optional Heartbeat beat = 3;

   // declare an election for a new leader 
   optional LeaderElection election = 4;

   // job management 
   // TODO should this be here or in the request?
   optional JobProposal job_propose = 5;
   optional JobBid job_bid = 6;
   
   // voting management
   optional VotingBallot vote_declare = 7;
   optional VotingCast vote_cast = 8;
   optional VotingStatus vote_status = 9;
}	
